//Test prve igre...
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#define BUFFERSIZE 50 //treba dodati u utility header

int normal();                                 //normalni mod igre
int easy();                                   //laki mod igre

//treba dodati hard() funkciju!

int kontrolaUnosa(char*, int*);               //funkcija1 za kontrolisanje validnosti unosa
int kontrolaUnosa2(char*, int*);              //funkcija2 za kontrolisanje validnosti unosa
int unos(int, int(*)(char*, int*));           //funkcija za obradu i kontrolu unosa
int isNumber(char);                           //da li je karakter broj
/*int unos1(int, int, int, int);*/            //testna
int playPogadjanje(int*);                     //GLAVNA FUNKCIJA ZA POZIV IGRE
int main()
{
    int bodovi;
    printf("Ovo je test prve igre.\nPrva 3 puta ce vam biti omoguceno da pobijedite a onda igra prelazi u normalan mod.\n");
    int i=0, znak;
    while(1)
    {
        bodovi=playPogadjanje(&i);
        printf("\nOsvojeno %d bodova\n\n", bodovi);
        znak=unos(-1, kontrolaUnosa2);
        if(znak==1) system("cls");
        else if(znak==0) return 0;
    }
}

int normal()//funkcija koja poziva normalan mod igre
{
    srand((unsigned)time(NULL));                                        //seeding
    int rnd=rand()%101, u, c=1;                                         //rnd dobija random vrijednost od 0 do 100, u je ulazna varijabla
    int i;
    //printf("rnd: %d\n\n", rnd);                                       //testni ispis
    for(i=0; i<5 && c; i++)                                             //c je kontrolna varijabla za izlazak iz petlje
    {
        u=unos(i, kontrolaUnosa);                                       //unos sa kontrolom
        if(u==rnd) {printf("Pogodak!"); c=0; return (100/(i+1));}       //uslov za pogodak, izlaz iz petlje
        else if(u<rnd){printf("Broj koji trazite je veci od unesenog broja!\n\n");}
        else if(u>rnd){printf("Broj koji trazite je manji od unesenog broja!\n\n");}
    }
    if(c)                                        //ako pogodak nije ostvaren iz petog puta...
    {
        printf("Izgubili ste! Broj je %d", rnd); //ispis poruke o tacnom broju
        return 0;                                //vracanje 0 bodova
    }
}

int easy()//funkcija koja poziva olaksani mod igre
{
    srand((unsigned)time(NULL));
    int rnd=rand()%101, u, c, donji=-1, gornji=101;
    const int RANGE=rand()%6+7;            //RANGE se uzima slucajno izmedju 7 i 12
    if((rnd+RANGE)>100) rnd-=RANGE;        //ako je rnd veci od 100-RANGE, potrebno ga je smanjiti da bi se sigurno moglo ukljuciti RANGE uzastopnih brojeva iz dozvoljenog opsega
    c=1;
    int i;
    //printf("RANGE: %d    rnd: %d\n\n", RANGE, rnd);                  //testni ispis
    for(i=0; i<5 && c; i++)
    {
        u=unos(i, kontrolaUnosa);                                      //unos sa kontrolom
        if((u>=rnd && u<rnd+RANGE) || (i==4 && u>donji && u<gornji))   //provjera da li u pada u opseg od rnd do rnd+RANGE koji se smatra tacnim; da li 5. pokusaj ulazi u vanjske granice
        {
            printf("Pogodak!\n");
            c=0;
            return (100/(i+1));                                        //vraca se broj poena 100/broj_pokusaja
        }
        else if(u<rnd)
        {
            printf("Broj koji trazite je veci od unesenog broja!\n\n");
            if(u>donji) donji=u;                                       //azuriranje vanjske donje granice
        }
        else if(u>=rnd+RANGE)
        {
            printf("Broj koji trazite je manji od unesenog broja!\n\n");
            if(u<gornji) gornji=u;                                     //azuriranje vanjske gornje granice
        }
    }
    if(c)
    {
        printf("Izgubili ste! Broj je %d\n", rnd);
        return 0;
    }
}
int kontrolaUnosa(char* string, int *br)
{
    int i, broj, duz=strlen(string);
    if(!duz)                                    //ako se pritisne samo enter
    {
        printf("Unesite broj od 0 do 100!\n");
        return 1;
    }
    for(i=0; i<duz; i++)                        //kroz cijeli unijeti string se provjerava...
    {
        if(!isNumber(string[i]))                //...da li ima znakova koji nisu cifre od 0 do 0
        {
            printf("Prihvataju se samo cifre od 0 do 9!\n");
            return 1;
        }
    }
    broj=atoi(string);                          //konverzija string-a u integer
    if(broj<0 || broj>100)                      //provjera da li int zadovoljava granice
    {
        printf("Unesite broj od 0 do 100!\n");
        return 1;
    }
    *br=broj;
    return 0;
}
int kontrolaUnosa2(char* string, int *br)
{
    int i, broj, duz=strlen(string);
    if(!duz)
    {
        printf("Unesite 1 da ponovite ili 0 da prekinete igru!\n");
        return 1;
    }
    for(i=0; i<duz; i++)
    {
        if(!isNumber(string[i]))
        {
            printf("Prihvataju se samo cifre 1 i 0!\n");
            return 1;
        }
    }
    broj=atoi(string);
    if(broj<0 || broj>1)
    {
        printf("Unesite 1 da ponovite ili 0 da prekinete igru!\n");
        return 1;
    }
    *br=broj;
    return 0;
}
int isNumber(char karakter)
{
    if(karakter>='0' && karakter<='9') return 1;
    return 0;
}
int unos(int i, int (*pf)(char*, int*))
{
    int u;
    char broj[BUFFERSIZE]={0};
    do
    {
        if(i!=-1) printf("%d. pokusaj: ", i+1);
        if(i==-1) printf("\nIgrajte ponovo? (1/0): ");
        fgets(broj, BUFFERSIZE, stdin);
        int duz=strlen(broj);
        if ((duz > 0) && (broj[duz - 1] == '\n')) broj[duz - 1] = '\0';
    }while((*pf)(broj, &u));
    u=atoi(broj);
    return u;
}

/*int unos1(int i, int mod, int max, int min)//testna funkcija
{
    static int generatedInput;
    max=max-1;
    min=min+1;
    if(mod==1) generatedInput=rand() % (max + 1 - min) + min;
    else if(mod==2) generatedInput=(max+min)/2;
    return generatedInput;
}*/

int playPogadjanje(int *brojIgranja)
{
    int bodovi;
    if(*brojIgranja<3) bodovi=easy();
    else bodovi=normal();
    (*brojIgranja)++;
    return bodovi;
}
